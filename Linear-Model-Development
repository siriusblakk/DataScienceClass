{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Go to <a href='#bookmark'>my bookmark</a>"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "\n",
    "<p style=\"text-align:center\">\n",
    "    <a href=\"https://skills.network\" target=\"_blank\">\n",
    "    <img src=\"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/assets/logos/SN_web_lightmode.png\" width=\"300\" alt=\"Skills Network Logo\">\n",
    "    </a>\n",
    "</p>\n",
    "\n",
    "\n",
    "# Model Development\n",
    "\n",
    "\n",
    "Estimated time needed: **30** minutes\n",
    "    \n",
    "\n",
    "## Objectives\n",
    "\n",
    "After completing this lab you will be able to:\n",
    "\n",
    "* Develop prediction models\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>In this section, we will develop several models that will predict the price of the car using the variables or features. This is just an estimate but should give us an objective idea of how much the car should cost.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some questions we want to ask in this module\n",
    "<ul>\n",
    "    <li>Do I know if the dealer is offering fair value for my trade-in?</li>\n",
    "    <li>Do I know if I put a fair value on my car?</li>\n",
    "</ul>\n",
    "<p>In data analytics, we often use <b>Model Development</b> to help us predict future observations from the data we have.</p>\n",
    "\n",
    "<p>A model will help us understand the exact relationship between different variables and how these variables are used to predict the result.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Setup</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Import libraries:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "#install specific version of libraries used in lab\n",
    "#! mamba install pandas==1.3.3-y\n",
    "#! mamba install numpy=1.21.2-y\n",
    "#! mamba install sklearn=0.20.1-y"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "import piplite\n",
    "await piplite.install('seaborn')"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:51:18.813195800Z",
     "start_time": "2024-01-09T00:51:18.800185900Z"
    }
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n"
   ],
   "execution_count": 1
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load the data and store it in dataframe `df`:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This dataset was hosted on IBM Cloud object. Click <a href=\"https://cocl.us/DA101EN_object_storage\">HERE</a> for free storage. Download it by running the cell below.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyodide.http import pyfetch\n",
    "\n",
    "async def download(url, filename):\n",
    "    response = await pyfetch(url)\n",
    "    if response.status == 200:\n",
    "        with open(filename, \"wb\") as f:\n",
    "            f.write(await response.bytes())"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "file_path= \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/automobileEDA.csv\"\n",
    "\n",
    "await download(file_path, \"usedcars.csv\")\n",
    "file_name=\"usedcars.csv\""
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:51:24.594341800Z",
     "start_time": "2024-01-09T00:51:23.882742200Z"
    }
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'file_name' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001B[1;31m---------------------------------------------------------------------------\u001B[0m",
      "\u001B[1;31mNameError\u001B[0m                                 Traceback (most recent call last)",
      "Cell \u001B[1;32mIn[2], line 1\u001B[0m\n\u001B[1;32m----> 1\u001B[0m df \u001B[38;5;241m=\u001B[39m pd\u001B[38;5;241m.\u001B[39mread_csv(\u001B[43mfile_name\u001B[49m)\n\u001B[0;32m      2\u001B[0m df\u001B[38;5;241m.\u001B[39mhead()\n",
      "\u001B[1;31mNameError\u001B[0m: name 'file_name' is not defined"
     ]
    }
   ],
   "source": [
    "df = pd.read_csv(file_name)\n",
    "df.head()"
   ],
   "execution_count": 2
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    ">Note: This version of the lab is working on JupyterLite, which requires the dataset to be downloaded to the interface.While working on the downloaded version of this notebook on their local machines(Jupyter Anaconda), the learners can simply skip the steps above, and simply use the URL directly in the pandas.read_csv() function. You can uncomment and run the statements in the cell below.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:51:31.178150600Z",
     "start_time": "2024-01-09T00:51:30.591570800Z"
    }
   },
   "outputs": [],
   "source": [
    "filepath = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-SkillsNetwork/labs/Data%20files/automobileEDA.csv\"\n",
    "df = pd.read_csv(filepath)"
   ],
   "execution_count": 3
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [
    {
     "data": {
      "text/plain": "   symboling  normalized-losses         make aspiration num-of-doors  \\\n0          3                122  alfa-romero        std          two   \n1          3                122  alfa-romero        std          two   \n2          1                122  alfa-romero        std          two   \n3          2                164         audi        std         four   \n4          2                164         audi        std         four   \n\n    body-style drive-wheels engine-location  wheel-base    length  ...  \\\n0  convertible          rwd           front        88.6  0.811148  ...   \n1  convertible          rwd           front        88.6  0.811148  ...   \n2    hatchback          rwd           front        94.5  0.822681  ...   \n3        sedan          fwd           front        99.8  0.848630  ...   \n4        sedan          4wd           front        99.4  0.848630  ...   \n\n   compression-ratio  horsepower  peak-rpm city-mpg highway-mpg    price  \\\n0                9.0       111.0    5000.0       21          27  13495.0   \n1                9.0       111.0    5000.0       21          27  16500.0   \n2                9.0       154.0    5000.0       19          26  16500.0   \n3               10.0       102.0    5500.0       24          30  13950.0   \n4                8.0       115.0    5500.0       18          22  17450.0   \n\n  city-L/100km  horsepower-binned  diesel  gas  \n0    11.190476             Medium       0    1  \n1    11.190476             Medium       0    1  \n2    12.368421             Medium       0    1  \n3     9.791667             Medium       0    1  \n4    13.055556             Medium       0    1  \n\n[5 rows x 29 columns]",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>symboling</th>\n      <th>normalized-losses</th>\n      <th>make</th>\n      <th>aspiration</th>\n      <th>num-of-doors</th>\n      <th>body-style</th>\n      <th>drive-wheels</th>\n      <th>engine-location</th>\n      <th>wheel-base</th>\n      <th>length</th>\n      <th>...</th>\n      <th>compression-ratio</th>\n      <th>horsepower</th>\n      <th>peak-rpm</th>\n      <th>city-mpg</th>\n      <th>highway-mpg</th>\n      <th>price</th>\n      <th>city-L/100km</th>\n      <th>horsepower-binned</th>\n      <th>diesel</th>\n      <th>gas</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>13495.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>convertible</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>88.6</td>\n      <td>0.811148</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>111.0</td>\n      <td>5000.0</td>\n      <td>21</td>\n      <td>27</td>\n      <td>16500.0</td>\n      <td>11.190476</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>122</td>\n      <td>alfa-romero</td>\n      <td>std</td>\n      <td>two</td>\n      <td>hatchback</td>\n      <td>rwd</td>\n      <td>front</td>\n      <td>94.5</td>\n      <td>0.822681</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>154.0</td>\n      <td>5000.0</td>\n      <td>19</td>\n      <td>26</td>\n      <td>16500.0</td>\n      <td>12.368421</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>fwd</td>\n      <td>front</td>\n      <td>99.8</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>10.0</td>\n      <td>102.0</td>\n      <td>5500.0</td>\n      <td>24</td>\n      <td>30</td>\n      <td>13950.0</td>\n      <td>9.791667</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2</td>\n      <td>164</td>\n      <td>audi</td>\n      <td>std</td>\n      <td>four</td>\n      <td>sedan</td>\n      <td>4wd</td>\n      <td>front</td>\n      <td>99.4</td>\n      <td>0.848630</td>\n      <td>...</td>\n      <td>8.0</td>\n      <td>115.0</td>\n      <td>5500.0</td>\n      <td>18</td>\n      <td>22</td>\n      <td>17450.0</td>\n      <td>13.055556</td>\n      <td>Medium</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 29 columns</p>\n</div>"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T00:51:32.803960500Z",
     "start_time": "2024-01-09T00:51:32.620245300Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>1. Linear Regression and Multiple Linear Regression</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Linear Regression</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<p>One example of a Data  Model that we will be using is:</p>\n",
    "<b>Simple Linear Regression</b>\n",
    "\n",
    "<br>\n",
    "<p>Simple Linear Regression is a method to help us understand the relationship between two variables:</p>\n",
    "<ul>\n",
    "    <li>The predictor/independent variable (X)</li>\n",
    "    <li>The response/dependent variable (that we want to predict)(Y)</li>\n",
    "</ul>\n",
    "\n",
    "<p>The result of Linear Regression is a <b>linear function</b> that predicts the response (dependent) variable as a function of the predictor (independent) variable.</p>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    " Y: Response \\ Variable\\\\\\\\\n",
    " X: Predictor \\ Variables\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " <b>Linear Function</b>\n",
    "$$\n",
    "Yhat = a + b  X\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ul>\n",
    "    <li>a refers to the <b>intercept</b> of the regression line, in other words: the value of Y when X is 0</li>\n",
    "    <li>b refers to the <b>slope</b> of the regression line, in other words: the value with which Y changes when X increases by 1 unit</li>\n",
    "</ul>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Let's load the modules for linear regression:</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:51:45.758466500Z",
     "start_time": "2024-01-09T00:51:45.345330400Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ],
   "execution_count": 5
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Create the linear regression object:</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:04.436947600Z",
     "start_time": "2024-01-09T00:52:04.406971400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm = LinearRegression()\n",
    "lm"
   ],
   "execution_count": 6
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>How could \"highway-mpg\" help us predict car price?</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this example, we want to look at how highway-mpg can help us predict car price.\n",
    "Using simple linear regression, we will create a linear function with \"highway-mpg\" as the predictor variable and the \"price\" as the response variable.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:07.361433Z",
     "start_time": "2024-01-09T00:52:07.322594600Z"
    }
   },
   "outputs": [],
   "source": [
    "X = df[['highway-mpg']]\n",
    "Y = df[['price']]"
   ],
   "execution_count": 7
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit the linear model using highway-mpg:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:11.979656500Z",
     "start_time": "2024-01-09T00:52:11.952116500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(X,Y)"
   ],
   "execution_count": 8
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " We can output a prediction:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:17.491472200Z",
     "start_time": "2024-01-09T00:52:17.450931800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([[16236.50464347],\n       [16236.50464347],\n       [17058.23802179],\n       [13771.3045085 ],\n       [20345.17153508]])"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Yhat=lm.predict(X)\n",
    "Yhat[0:5]   "
   ],
   "execution_count": 9
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>What is the value of the intercept (a)?</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:20.827509100Z",
     "start_time": "2024-01-09T00:52:20.796717400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([38423.30585816])"
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.intercept_"
   ],
   "execution_count": 10
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>What is the value of the slope (b)?</h4>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:23.695122Z",
     "start_time": "2024-01-09T00:52:23.663058800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([[-821.73337832]])"
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.coef_"
   ],
   "execution_count": 11
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>What is the final estimated linear model we get?</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we saw above, we should get a final linear model with the structure:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "Yhat = a + b  X\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plugging in the actual values we get:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Price</b> = 38423.31 - 821.73 x <b>highway-mpg</b>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question #1 a): </h1>\n",
    "\n",
    "<b>Create a linear regression object called \"lm1\".</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:41.963628800Z",
     "start_time": "2024-01-09T00:52:41.894343600Z"
    }
   },
   "outputs": [],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "lm = LinearRegression()"
   ],
   "execution_count": 12
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-3 {color: black;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:43.049779400Z",
     "start_time": "2024-01-09T00:52:42.918678400Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "lm1 = LinearRegression()\n",
    "lm1\n",
    "```\n",
    "\n",
    "</details>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1> Question #1 b): </h1>\n",
    "\n",
    "<b>Train the model using \"engine-size\" as the independent variable and \"price\" as the dependent variable?</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:51.324534400Z",
     "start_time": "2024-01-09T00:52:51.245505Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-7963.33890628] [[166.86001569]]\n"
     ]
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "X = df[['engine-size']]\n",
    "Y = df[['price']]\n",
    "lm.fit(X,Y)\n",
    "\n",
    "print(lm.intercept_,lm.coef_)"
   ],
   "execution_count": 14
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [
    {
     "data": {
      "text/plain": "array([[13728.4631336 ],\n       [13728.4631336 ],\n       [17399.38347881],\n       [10224.40280408],\n       [14729.62322775]])"
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat = lm.predict(df[['engine-size']])\n",
    "y_hat[0:5]"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T00:52:55.779626100Z",
     "start_time": "2024-01-09T00:52:55.663656900Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "# Slope \n",
    "lm1.coef_\n",
    "\n",
    "# Intercept\n",
    "lm1.intercept_\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question #1 d): </h1>\n",
    "\n",
    "<b>What is the equation of the predicted line? You can use x and yhat or \"engine-size\" or \"price\".</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "# using X and Y  \n",
    "Yhat=-7963.34 + 166.86*X\n",
    "\n",
    "Price=-7963.34 + 166.86*df['engine-size']\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h4>Multiple Linear Regression</h4>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>What if we want to predict car price using more than one variable?</p>\n",
    "\n",
    "<p>If we want to use more variables in our model to predict car price, we can use <b>Multiple Linear Regression</b>.\n",
    "Multiple Linear Regression is very similar to Simple Linear Regression, but this method is used to explain the relationship between one continuous response (dependent) variable and <b>two or more</b> predictor (independent) variables.\n",
    "Most of the real-world regression models involve multiple predictors. We will illustrate the structure by using four predictor variables, but these results can generalize to any integer:</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "Y: Response \\ Variable\\\\\\\\\n",
    "X_1 :Predictor\\ Variable \\ 1\\\\\n",
    "X_2: Predictor\\ Variable \\ 2\\\\\n",
    "X_3: Predictor\\ Variable \\ 3\\\\\n",
    "X_4: Predictor\\ Variable \\ 4\\\\\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "a: intercept\\\\\\\\\n",
    "b_1 :coefficients \\ of\\ Variable \\ 1\\\\\n",
    "b_2: coefficients \\ of\\ Variable \\ 2\\\\\n",
    "b_3: coefficients \\ of\\ Variable \\ 3\\\\\n",
    "b_4: coefficients \\ of\\ Variable \\ 4\\\\\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The equation is given by:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "Yhat = a + b_1 X_1 + b_2 X_2 + b_3 X_3 + b_4 X_4\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>From the previous section  we know that other good predictors of price could be:</p>\n",
    "<ul>\n",
    "    <li>Horsepower</li>\n",
    "    <li>Curb-weight</li>\n",
    "    <li>Engine-size</li>\n",
    "    <li>Highway-mpg</li>\n",
    "</ul>\n",
    "Let's develop a model using these variables as the predictor variables.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:53:59.593249700Z",
     "start_time": "2024-01-09T00:53:59.565902600Z"
    }
   },
   "outputs": [],
   "source": [
    "Z = df[['horsepower', 'curb-weight', 'engine-size', 'highway-mpg']]\n",
    "lm = LinearRegression()"
   ],
   "execution_count": 16
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit the linear model using the four above-mentioned variables.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:21.890431900Z",
     "start_time": "2024-01-09T00:54:21.853420200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-4 {color: black;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(Z, df['price'])"
   ],
   "execution_count": 17
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the value of the intercept(a)?\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:26.477540100Z",
     "start_time": "2024-01-09T00:54:26.437704600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "-15806.624626329227"
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.intercept_"
   ],
   "execution_count": 18
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are the values of the coefficients (b1, b2, b3, b4)?\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:28.441022100Z",
     "start_time": "2024-01-09T00:54:28.411612200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([53.49574423,  4.70770099, 81.53026382, 36.05748882])"
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.coef_"
   ],
   "execution_count": 19
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " What is the final estimated linear model that we get?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we saw above, we should get a final linear function with the structure:\n",
    "\n",
    "$$\n",
    "Yhat = a + b_1 X_1 + b_2 X_2 + b_3 X_3 + b_4 X_4\n",
    "$$\n",
    "\n",
    "What is the linear function we get in this example?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Price</b> = -15678.742628061467 + 52.65851272 x <b>horsepower</b> + 4.69878948 x <b>curb-weight</b> + 81.95906216 x <b>engine-size</b> + 33.58258185 x <b>highway-mpg</b>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1> Question  #2 a): </h1>\n",
    "Create and train a Multiple Linear Regression model \"lm2\" where the response variable is \"price\", and the predictor variable is \"normalized-losses\" and  \"highway-mpg\".\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:42.311224Z",
     "start_time": "2024-01-09T00:54:42.287437400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-5 {color: black;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "Z = df[['normalized-losses','highway-mpg']]\n",
    "lm.fit(Z,df[['price']])"
   ],
   "execution_count": 20
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "lm2 = LinearRegression()\n",
    "lm2.fit(df[['normalized-losses' , 'highway-mpg']],df['price'])\n",
    "\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question  #2 b): </h1>\n",
    "<b>Find the coefficient of the model.</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:47.397342500Z",
     "start_time": "2024-01-09T00:54:47.366682900Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([[   1.49789586, -820.45434016]])"
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "lm.coef_"
   ],
   "execution_count": 21
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "lm2.coef_\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>2. Model Evaluation Using Visualization</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we've developed some models, how do we evaluate our models and choose the best one? One way to do this is by using a visualization.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Import the visualization package, seaborn:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:51.971916500Z",
     "start_time": "2024-01-09T00:54:51.943745700Z"
    }
   },
   "outputs": [],
   "source": [
    "# import the visualization package: seaborn\n",
    "import seaborn as sns\n",
    "%matplotlib inline "
   ],
   "execution_count": 22
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Regression Plot</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>When it comes to simple linear regression, an excellent way to visualize the fit of our model is by using <b>regression plots</b>.</p>\n",
    "\n",
    "<p>This plot will show a combination of a scattered data points (a <b>scatterplot</b>), as well as the fitted <b>linear regression</b> line going through the data. This will give us a reasonable estimate of the relationship between the two variables, the strength of the correlation, as well as the direction (positive or negative correlation).</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's visualize **highway-mpg** as potential predictor variable of price:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:54:55.549144900Z",
     "start_time": "2024-01-09T00:54:55.211677400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(0.0, 48168.28488953663)"
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 600x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 6\n",
    "height = 5\n",
    "plt.figure(figsize=(width, height))\n",
    "sns.regplot(x=\"highway-mpg\", y=\"price\", data=df)\n",
    "plt.ylim(0,)"
   ],
   "execution_count": 23
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We can see from this plot that price is negatively correlated to highway-mpg since the regression slope is negative.\n",
    "\n",
    "One thing to keep in mind when looking at a regression plot is to pay attention to how scattered the data points are around the regression line. This will give you a good indication of the variance of the data and whether a linear model would be the best fit or not. If the data is too far off from the line, this linear model might not be the best model for this data.\n",
    "\n",
    "Let's compare this plot to the regression plot of \"peak-rpm\".</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:55:49.501892300Z",
     "start_time": "2024-01-09T00:55:49.226173100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(0.0, 47414.1)"
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": "<Figure size 600x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(width, height))\n",
    "sns.regplot(x=\"peak-rpm\", y=\"price\", data=df)\n",
    "plt.ylim(0,)"
   ],
   "execution_count": 24
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Comparing the regression plot of \"peak-rpm\" and \"highway-mpg\", we see that the points for \"highway-mpg\" are much closer to the generated line and, on average, decrease. The points for \"peak-rpm\" have more spread around the predicted line and it is much harder to determine if the points are decreasing or increasing as the \"peak-rpm\" increases.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question #3:</h1>\n",
    "<b>Given the regression plots above, is \"peak-rpm\" or \"highway-mpg\" more strongly correlated with \"price\"? Use the method  \".corr()\" to verify your answer.</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:55:56.902957400Z",
     "start_time": "2024-01-09T00:55:56.862817400Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "                price  peak-rpm  highway-mpg\nprice        1.000000 -0.101616    -0.704692\npeak-rpm    -0.101616  1.000000    -0.058598\nhighway-mpg -0.704692 -0.058598     1.000000",
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>price</th>\n      <th>peak-rpm</th>\n      <th>highway-mpg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>price</th>\n      <td>1.000000</td>\n      <td>-0.101616</td>\n      <td>-0.704692</td>\n    </tr>\n    <tr>\n      <th>peak-rpm</th>\n      <td>-0.101616</td>\n      <td>1.000000</td>\n      <td>-0.058598</td>\n    </tr>\n    <tr>\n      <th>highway-mpg</th>\n      <td>-0.704692</td>\n      <td>-0.058598</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "# Highway mpg is more strongly correlated, as the pearson correlation ceof shows (-0.7 for highway, -0.1 for peak rpm)\n",
    "df[['price','peak-rpm','highway-mpg']].corr()"
   ],
   "execution_count": 25
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "# The variable \"highway-mpg\" has a stronger correlation with \"price\", it is approximate -0.704692  compared to \"peak-rpm\" which is approximate -0.101616. You can verify it using the following command:\n",
    "\n",
    "df[[\"peak-rpm\",\"highway-mpg\",\"price\"]].corr()\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Residual Plot</h3>\n",
    "\n",
    "<p>A good way to visualize the variance of the data is to use a residual plot.</p>\n",
    "\n",
    "<p>What is a <b>residual</b>?</p>\n",
    "\n",
    "<p>The difference between the observed value (y) and the predicted value (Yhat) is called the residual (e). When we look at a regression plot, the residual is the distance from the data point to the fitted regression line.</p>\n",
    "\n",
    "<p>So what is a <b>residual plot</b>?</p>\n",
    "\n",
    "<p>A residual plot is a graph that shows the residuals on the vertical y-axis and the independent variable on the horizontal x-axis.</p>\n",
    "\n",
    "<p>What do we pay attention to when looking at a residual plot?</p>\n",
    "\n",
    "<p>We look at the spread of the residuals:</p>\n",
    "\n",
    "<p>- If the points in a residual plot are <b>randomly spread out around the x-axis</b>, then a <b>linear model is appropriate</b> for the data.\n",
    "\n",
    "Why is that? Randomly spread out residuals means that the variance is constant, and thus the linear model is a good fit for this data.</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:56:30.182843700Z",
     "start_time": "2024-01-09T00:56:29.979107800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 600x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "width = 6\n",
    "height = 5\n",
    "plt.figure(figsize=(width, height))\n",
    "sns.residplot(x=df['highway-mpg'], y=df['price'])\n",
    "plt.show()"
   ],
   "execution_count": 26
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<i>What is this plot telling us?</i>\n",
    "\n",
    "<p>We can see from this residual plot that the residuals are not randomly spread around the x-axis, leading us to believe that maybe a non-linear model is more appropriate for this data.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Multiple Linear Regression</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>How do we visualize a model for Multiple Linear Regression? This gets a bit more complicated because you can't visualize it with regression or residual plot.</p>\n",
    "\n",
    "<p>One way to look at the fit of the model is by looking at the <b>distribution plot</b>. We can look at the distribution of the fitted values that result from the model and compare it to the distribution of the actual values.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's make a prediction:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:56:36.897351100Z",
     "start_time": "2024-01-09T00:56:36.826824700Z"
    }
   },
   "outputs": [],
   "source": [
    "Y_hat = lm.predict(Z)"
   ],
   "execution_count": 28
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:57:52.473168600Z",
     "start_time": "2024-01-09T00:57:52.129228900Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gmaples\\AppData\\Local\\Temp\\ipykernel_21924\\1836987235.py:4: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  ax1 = sns.distplot(df['price'], hist=False, color=\"r\", label=\"Actual Value\")\n",
      "C:\\Users\\gmaples\\AppData\\Local\\Temp\\ipykernel_21924\\1836987235.py:5: UserWarning: \n",
      "\n",
      "`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n",
      "\n",
      "Please adapt your code to use either `displot` (a figure-level function with\n",
      "similar flexibility) or `kdeplot` (an axes-level function for kernel density plots).\n",
      "\n",
      "For a guide to updating your code to use the new functions, please see\n",
      "https://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n",
      "\n",
      "  sns.distplot(Y_hat, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 600x500 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(width, height))\n",
    "\n",
    "\n",
    "ax1 = sns.distplot(df['price'], hist=False, color=\"r\", label=\"Actual Value\")\n",
    "sns.distplot(Y_hat, hist=False, color=\"b\", label=\"Fitted Values\" , ax=ax1)\n",
    "\n",
    "\n",
    "plt.title('Actual vs Fitted Values for Price')\n",
    "plt.xlabel('Price (in dollars)')\n",
    "plt.ylabel('Proportion of Cars')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "plt.close()"
   ],
   "execution_count": 34
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We can see that the fitted values are reasonably close to the actual values since the two distributions overlap a bit. However, there is definitely some room for improvement.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>3. Polynomial Regression and Pipelines</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "<a id='bookmark' />"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p><b>Polynomial regression</b> is a particular case of the general linear regression model or multiple linear regression models.</p> \n",
    "<p>We get non-linear relationships by squaring or setting higher-order terms of the predictor variables.</p>\n",
    "\n",
    "<p>There are different orders of polynomial regression:</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center><b>Quadratic - 2nd Order</b></center>\n",
    "$$\n",
    "Yhat = a + b_1 X +b_2 X^2 \n",
    "$$\n",
    "\n",
    "\n",
    "<center><b>Cubic - 3rd Order</b></center>\n",
    "$$\n",
    "Yhat = a + b_1 X +b_2 X^2 +b_3 X^3\\\\\\\\\n",
    "$$\n",
    "\n",
    "\n",
    "<center><b>Higher-Order</b>:</center>\n",
    "$$\n",
    "Y = a + b_1 X +b_2 X^2 +b_3 X^3 ....\\\\\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We saw earlier that a linear model did not provide the best fit while using \"highway-mpg\" as the predictor variable. Let's see if we can try fitting a polynomial model to the data instead.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We will use the following function to plot the data:</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:59:47.177856600Z",
     "start_time": "2024-01-09T00:59:47.142711900Z"
    }
   },
   "outputs": [],
   "source": [
    "def PlotPolly(model, independent_variable, dependent_variabble, Name):\n",
    "    x_new = np.linspace(15, 55, 100)\n",
    "    y_new = model(x_new)\n",
    "\n",
    "    plt.plot(independent_variable, dependent_variabble, '.', x_new, y_new, '-')\n",
    "    plt.title('Polynomial Fit with Matplotlib for Price ~ Length')\n",
    "    ax = plt.gca()\n",
    "    ax.set_facecolor((0.898, 0.898, 0.898))\n",
    "    fig = plt.gcf()\n",
    "    plt.xlabel(Name)\n",
    "    plt.ylabel('Price of Cars')\n",
    "\n",
    "    plt.show()\n",
    "    plt.close()"
   ],
   "execution_count": 35
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's get the variables:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:59:49.463048800Z",
     "start_time": "2024-01-09T00:59:49.426401100Z"
    }
   },
   "outputs": [],
   "source": [
    "x = df['highway-mpg']\n",
    "y = df['price']"
   ],
   "execution_count": 36
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's fit the polynomial using the function <b>polyfit</b>, then use the function <b>poly1d</b> to display the polynomial function.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:59:51.348177900Z",
     "start_time": "2024-01-09T00:59:51.286231Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        3         2\n",
      "-1.557 x + 204.8 x - 8965 x + 1.379e+05\n"
     ]
    }
   ],
   "source": [
    "# Here we use a polynomial of the 3rd order (cubic) \n",
    "f = np.polyfit(x, y, 3)\n",
    "p = np.poly1d(f)\n",
    "print(p)"
   ],
   "execution_count": 37
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Let's plot the function:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T00:59:56.179602Z",
     "start_time": "2024-01-09T00:59:55.956194500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": "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jw0bNtwwxlatWnHTTTdVeJ+/+uoroqOj9cM9ZX7++WfGjx9PeHg4K1as4K233qJx48bMnj2buLg4AgMDWbZsGQBPPvmk/u8Ax44d4/XXX2fChAksWrSIK1eu8Mgjj5CSkmK0bTf6zPbs2ZMnn3wSKB2aeuqpp24Yb5np06czcuRI3nrrLTw9Pfnvf//L4cOHjZ771FNPGTzPjBkzUBSFJ554gvfff59hw4bxzjvv0L9/f954440KQ11ff/01np6evP322zz22GMmt7HMlStXuHLlikFvYklJCR988AFz585l6tSptGzZssJ1kydPZvXq1QwbNox3332X7t27M2XKFLZv3w7Atm3bGD9+PC1atGD58uVMmDCBL7/8kqeeespqk5YLCwsZNWoUP/zwA08//TTLli0jODiYxx57rEKS9Prrr6PT6Xjttdd4/vnn+emnn5g3b57++LJly1i8eDEDBgxgxYoVREZG8n//93/649f7/OzYsYMTJ07w6quvMmPGDI4cOcLTTz9t2eDrIBliExalKIpBT0FmZib79u3j7bff1v+Gn5mZydtvv83w4cN5+eWX9ee2bt2ahx9+mM2bN/Pwww8b1NuyZUuioqLYunUrw4YNA+Cvv/7izJkzvPrqq/rz8vPzmTt3LrfccgsAzZo1o1evXuzatYuWLVuyevVq0tPT+fbbb2nYsCEAt99+O6NHj2bhwoUMGjQItbr094hWrVrphxCio6PZtGkTRUVFLF68GGdnZ7p37863337LX3/9ZfS1OH78OG3btuXNN9/Ey8sLgFtvvZXff/+dvXv3Mm7cOLNeW2NJzn/+8x+jwxytWrXSP2dlQzqdOnXC09OT3bt306FDB86dO8eFCxcIDw9n//793HfffRQUFLB//35mzpxp1nOMHDlS/x98165d2blzJ3v27OGRRx65YZwDBgzgww8/NBhm27FjB0888USFc0+ePMm9997L9OnT9WVRUVHExMSwd+9eIiMjadu2LVA6PHjtXJ3s7GzeeecdOnfuDECHDh3o06cPH374IZMnTzZ4HlM/s2VJg7GhqeuZNWsW/fv3B+CWW27hjjvu4L333mPp0qUVzm3SpEmF59m1axd//PEHr732GnfddRcA3bp1w83NjTfffJORI0dy0003AeDi4sKsWbMqJLzG6HQ6/b/nwsJCzpw5w+LFi1Gr1fzn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"
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotPolly(p, x, y, 'highway-mpg')"
   ],
   "execution_count": 38
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:00:00.305505100Z",
     "start_time": "2024-01-09T01:00:00.248362800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([-1.55663829e+00,  2.04754306e+02, -8.96543312e+03,  1.37923594e+05])"
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.polyfit(x, y, 3)"
   ],
   "execution_count": 39
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>We can already see from plotting that this polynomial model performs better than the linear model. This is because the generated polynomial function  \"hits\" more of the data points.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question  #4:</h1>\n",
    "<b>Create 11 order polynomial model with the variables x and y from above.</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:00:26.762765700Z",
     "start_time": "2024-01-09T01:00:26.731040300Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-1.24263392e-08  4.72184894e-06 -8.02843484e-04  8.05640306e-02\n",
      " -5.29740982e+00  2.39470330e+02 -7.58845742e+03  1.68447254e+05\n",
      " -2.56531153e+06  2.55140623e+07 -1.49106965e+08  3.87930088e+08]\n"
     ]
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "f = np.polyfit(x,y,11)\n",
    "print(f)"
   ],
   "execution_count": 40
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "outputs": [],
   "source": [
    "\n",
    "p = np.poly1d(f)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T01:01:49.235427200Z",
     "start_time": "2024-01-09T01:01:49.198916500Z"
    }
   }
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "PlotPolly(p, x, y, 'highway-mpg')\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T01:01:51.080870300Z",
     "start_time": "2024-01-09T01:01:50.845513700Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "# Here we use a polynomial of the 11rd order (cubic) \n",
    "f1 = np.polyfit(x, y, 11)\n",
    "p1 = np.poly1d(f1)\n",
    "print(p1)\n",
    "PlotPolly(p1,x,y, 'Highway MPG')\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>The analytical expression for Multivariate Polynomial function gets complicated. For example, the expression for a second-order (degree=2) polynomial with two variables is given by:</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "Yhat = a + b_1 X_1 +b_2 X_2 +b_3 X_1 X_2+b_4 X_1^2+b_5 X_2^2\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can perform a polynomial transform on multiple features. First, we import the module:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:01:55.483007100Z",
     "start_time": "2024-01-09T01:01:55.450898Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures"
   ],
   "execution_count": 48
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a <b>PolynomialFeatures</b> object of degree 2: \n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:01:58.097639200Z",
     "start_time": "2024-01-09T01:01:58.042718200Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "PolynomialFeatures()",
      "text/html": "<style>#sk-container-id-7 {color: black;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>PolynomialFeatures()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures()</pre></div></div></div></div></div>"
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pr=PolynomialFeatures(degree=2)\n",
    "pr"
   ],
   "execution_count": 49
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:02.533878400Z",
     "start_time": "2024-01-09T01:02:02.502986500Z"
    }
   },
   "outputs": [],
   "source": [
    "Z_pr=pr.fit_transform(Z)"
   ],
   "execution_count": 50
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the original data, there are 201 samples and 4 features.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:04.818580500Z",
     "start_time": "2024-01-09T01:02:04.768654800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(201, 2)"
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z.shape"
   ],
   "execution_count": 51
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After the transformation, there are 201 samples and 15 features.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:06.962958Z",
     "start_time": "2024-01-09T01:02:06.898536700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "(201, 6)"
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z_pr.shape"
   ],
   "execution_count": 52
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Pipeline</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Data Pipelines simplify the steps of processing the data. We use the module <b>Pipeline</b> to create a pipeline. We also use <b>StandardScaler</b> as a step in our pipeline.</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:16.961819Z",
     "start_time": "2024-01-09T01:02:16.926900900Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler"
   ],
   "execution_count": 53
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create the pipeline by creating a list of tuples including the name of the model or estimator and its corresponding constructor.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:51.763264900Z",
     "start_time": "2024-01-09T01:02:51.731665800Z"
    }
   },
   "outputs": [],
   "source": [
    "Input=[('scale',StandardScaler()), ('polynomial', PolynomialFeatures(include_bias=False)), ('model',LinearRegression())]"
   ],
   "execution_count": 54
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We input the list as an argument to the pipeline constructor:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:53.403928700Z",
     "start_time": "2024-01-09T01:02:53.358669800Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Pipeline(steps=[('scale', StandardScaler()),\n                ('polynomial', PolynomialFeatures(include_bias=False)),\n                ('model', LinearRegression())])",
      "text/html": "<style>#sk-container-id-8 {color: black;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scale&#x27;, StandardScaler()),\n                (&#x27;polynomial&#x27;, PolynomialFeatures(include_bias=False)),\n                (&#x27;model&#x27;, LinearRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scale&#x27;, StandardScaler()),\n                (&#x27;polynomial&#x27;, PolynomialFeatures(include_bias=False)),\n                (&#x27;model&#x27;, LinearRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div>"
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe=Pipeline(Input)\n",
    "pipe"
   ],
   "execution_count": 55
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we convert the data type Z to type float to avoid conversion warnings that may appear as a result of StandardScaler taking float inputs.\n",
    "\n",
    "Then, we can normalize the data,  perform a transform and fit the model simultaneously. \n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:02:58.474914Z",
     "start_time": "2024-01-09T01:02:58.427666700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "Pipeline(steps=[('scale', StandardScaler()),\n                ('polynomial', PolynomialFeatures(include_bias=False)),\n                ('model', LinearRegression())])",
      "text/html": "<style>#sk-container-id-9 {color: black;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;scale&#x27;, StandardScaler()),\n                (&#x27;polynomial&#x27;, PolynomialFeatures(include_bias=False)),\n                (&#x27;model&#x27;, LinearRegression())])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;scale&#x27;, StandardScaler()),\n                (&#x27;polynomial&#x27;, PolynomialFeatures(include_bias=False)),\n                (&#x27;model&#x27;, LinearRegression())])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PolynomialFeatures</label><div class=\"sk-toggleable__content\"><pre>PolynomialFeatures(include_bias=False)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div></div></div>"
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z = Z.astype(float)\n",
    "pipe.fit(Z,y)"
   ],
   "execution_count": 56
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Similarly,  we can normalize the data, perform a transform and produce a prediction  simultaneously.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:03:06.056232600Z",
     "start_time": "2024-01-09T01:03:06.025027500Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([15388.77780567, 15388.77780567, 16771.84474515, 11641.85647791])"
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ypipe=pipe.predict(Z)\n",
    "ypipe[0:4]"
   ],
   "execution_count": 57
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-danger alertdanger\" style=\"margin-top: 20px\">\n",
    "<h1>Question #5:</h1>\n",
    "<b>Create a pipeline that standardizes the data, then produce a prediction using a linear regression model using the features Z and target y.</b>\n",
    "</div>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:05:11.676075300Z",
     "start_time": "2024-01-09T01:05:11.645791700Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "array([16231.78938339, 16231.78938339, 17052.24372355, 13833.33798916,\n       20396.97271047, 17872.69806371, 17926.6223148 , 17872.69806371,\n       22028.89401561, 14695.7334135 ])"
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Write your code below and press Shift+Enter to execute \n",
    "Input = [('scale',StandardScaler()),('model',LinearRegression())]\n",
    "\n",
    "pipe = Pipeline(Input)\n",
    "pipe.fit(Z,y)\n",
    "\n",
    "ypipe = pipe.predict(Z)\n",
    "ypipe[0:10]"
   ],
   "execution_count": 61
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<details><summary>Click here for the solution</summary>\n",
    "\n",
    "```python\n",
    "Input=[('scale',StandardScaler()),('model',LinearRegression())]\n",
    "\n",
    "pipe=Pipeline(Input)\n",
    "\n",
    "pipe.fit(Z,y)\n",
    "\n",
    "ypipe=pipe.predict(Z)\n",
    "ypipe[0:10]\n",
    "\n",
    "```\n",
    "\n",
    "</details>\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>4. Measures for In-Sample Evaluation</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>When evaluating our models, not only do we want to visualize the results, but we also want a quantitative measure to determine how accurate the model is.</p>\n",
    "\n",
    "<p>Two very important measures that are often used in Statistics to determine the accuracy of a model are:</p>\n",
    "<ul>\n",
    "    <li><b>R^2 / R-squared</b></li>\n",
    "    <li><b>Mean Squared Error (MSE)</b></li>\n",
    "</ul>\n",
    "    \n",
    "<b>R-squared</b>\n",
    "\n",
    "<p>R squared, also known as the coefficient of determination, is a measure to indicate how close the data is to the fitted regression line.</p>\n",
    "    \n",
    "<p>The value of the R-squared is the percentage of variation of the response variable (y) that is explained by a linear model.</p>\n",
    "\n",
    "\n",
    "\n",
    "<b>Mean Squared Error (MSE)</b>\n",
    "\n",
    "<p>The Mean Squared Error measures the average of the squares of errors. That is, the difference between actual value (y) and the estimated value (ŷ).</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Model 1: Simple Linear Regression</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the R^2:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:13:17.034921800Z",
     "start_time": "2024-01-09T01:13:17.013153400Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R-square is:  0.7609686443622008\n"
     ]
    }
   ],
   "source": [
    "#highway_mpg_fit\n",
    "lm.fit(X, Y)\n",
    "# Find the R^2\n",
    "print('The R-square is: ', lm.score(X, Y))"
   ],
   "execution_count": 62
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can say that ~49.659% of the variation of the price is explained by this simple linear model \"horsepower_fit\".\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the MSE:\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can predict the output i.e., \"yhat\" using the predict method, where X is the input variable:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:17:03.305194Z",
     "start_time": "2024-01-09T01:17:03.275250Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The output of the first four predicted value is:  [[13728.4631336 ]\n",
      " [13728.4631336 ]\n",
      " [17399.38347881]\n",
      " [10224.40280408]]\n"
     ]
    }
   ],
   "source": [
    "Yhat=lm.predict(X)\n",
    "print('The output of the first four predicted value is: ', Yhat[0:4])"
   ],
   "execution_count": 63
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's import the function <b>mean_squared_error</b> from the module <b>metrics</b>:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:17:06.389557Z",
     "start_time": "2024-01-09T01:17:06.333154600Z"
    }
   },
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_squared_error"
   ],
   "execution_count": 64
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can compare the predicted results with the actual results:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:17:08.809210900Z",
     "start_time": "2024-01-09T01:17:08.778544Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean square error of price and predicted value is:  15021126.02517414\n"
     ]
    }
   ],
   "source": [
    "mse = mean_squared_error(df['price'], Yhat)\n",
    "print('The mean square error of price and predicted value is: ', mse)"
   ],
   "execution_count": 65
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Model 2: Multiple Linear Regression</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the R^2:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:17:19.850801400Z",
     "start_time": "2024-01-09T01:17:19.800638100Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R-square is:  0.4966263556974878\n"
     ]
    }
   ],
   "source": [
    "# fit the model \n",
    "lm.fit(Z, df['price'])\n",
    "# Find the R^2\n",
    "print('The R-square is: ', lm.score(Z, df['price']))"
   ],
   "execution_count": 66
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can say that ~80.896 % of the variation of price is explained by this multiple linear regression \"multi_fit\".\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the MSE.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We produce a prediction:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:18:34.426013400Z",
     "start_time": "2024-01-09T01:18:34.391316800Z"
    }
   },
   "outputs": [],
   "source": [
    "Y_predict_multifit = lm.predict(Z)"
   ],
   "execution_count": 67
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We compare the predicted results with the actual results:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:18:37.239877300Z",
     "start_time": "2024-01-09T01:18:37.201125600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean square error of price and predicted value using multifit is:  31632832.975589428\n"
     ]
    }
   ],
   "source": [
    "print('The mean square error of price and predicted value using multifit is: ', \\\n",
    "      mean_squared_error(df['price'], Y_predict_multifit))"
   ],
   "execution_count": 68
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Model 3: Polynomial Fit</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's calculate the R^2.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let’s import the function <b>r2_score</b> from the module <b>metrics</b> as we are using a different function.\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import r2_score"
   ],
   "execution_count": 0
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "outputs": [
    {
     "data": {
      "text/plain": "0      27\n1      27\n2      26\n3      30\n4      22\n       ..\n196    28\n197    25\n198    23\n199    27\n200    25\nName: highway-mpg, Length: 201, dtype: int64"
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-01-09T01:20:44.492996500Z",
     "start_time": "2024-01-09T01:20:44.438831700Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We apply the function to get the value of R^2:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:19:24.275539700Z",
     "start_time": "2024-01-09T01:19:24.248822600Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R-square value is:  0.7023769091934696\n"
     ]
    }
   ],
   "source": [
    "r_squared = r2_score(y, p(x))\n",
    "print('The R-square value is: ', r_squared)"
   ],
   "execution_count": 70
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can say that ~67.419 % of the variation of price is explained by this polynomial fit.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>MSE</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also calculate the MSE:  \n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "mean_squared_error(df['price'], p(x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>5. Prediction and Decision Making</h2>\n",
    "<h3>Prediction</h3>\n",
    "\n",
    "<p>In the previous section, we trained the model using the method <b>fit</b>. Now we will use the method <b>predict</b> to produce a prediction. Lets import <b>pyplot</b> for plotting; we will also be using some functions from numpy.</p>\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:24:46.258601800Z",
     "start_time": "2024-01-09T01:24:46.231674300Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline "
   ],
   "execution_count": 74
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a new input:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:24:48.518115400Z",
     "start_time": "2024-01-09T01:24:48.484195600Z"
    }
   },
   "outputs": [],
   "source": [
    "new_input=np.arange(1, 100, 1).reshape(-1, 1)"
   ],
   "execution_count": 75
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Fit the model:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:24:51.499965100Z",
     "start_time": "2024-01-09T01:24:51.456838600Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "LinearRegression()",
      "text/html": "<style>#sk-container-id-10 {color: black;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" checked><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lm.fit(X, Y)\n",
    "lm"
   ],
   "execution_count": 76
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Produce a prediction:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:24:55.526253900Z",
     "start_time": "2024-01-09T01:24:55.470662700Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\gmaples\\PycharmProjects\\DataScienceClass\\.venv\\Lib\\site-packages\\sklearn\\base.py:465: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": "array([[-7796.47889059],\n       [-7629.6188749 ],\n       [-7462.75885921],\n       [-7295.89884352],\n       [-7129.03882782]])"
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat=lm.predict(new_input)\n",
    "yhat[0:5]"
   ],
   "execution_count": 77
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the data:\n"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-01-09T01:25:01.340303100Z",
     "start_time": "2024-01-09T01:25:01.180313100Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(new_input, yhat)\n",
    "plt.show()"
   ],
   "execution_count": 78
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Decision Making: Determining a Good Model Fit</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Now that we have visualized the different models, and generated the R-squared and MSE values for the fits, how do we determine a good model fit?\n",
    "<ul>\n",
    "    <li><i>What is a good R-squared value?</i></li>\n",
    "</ul>\n",
    "</p>\n",
    "\n",
    "<p>When comparing models, <b>the model with the higher R-squared value is a better fit</b> for the data.\n",
    "<ul>\n",
    "    <li><i>What is a good MSE?</i></li>\n",
    "</ul>\n",
    "</p>\n",
    "\n",
    "<p>When comparing models, <b>the model with the smallest MSE value is a better fit</b> for the data.</p>\n",
    "\n",
    "\n",
    "<h4>Let's take a look at the values for the different models.</h4>\n",
    "<p>Simple Linear Regression: Using Highway-mpg as a Predictor Variable of Price.\n",
    "<ul>\n",
    "    <li>R-squared: 0.49659118843391759</li>\n",
    "    <li>MSE: 3.16 x10^7</li>\n",
    "</ul>\n",
    "</p>\n",
    "    \n",
    "<p>Multiple Linear Regression: Using Horsepower, Curb-weight, Engine-size, and Highway-mpg as Predictor Variables of Price.\n",
    "<ul>\n",
    "    <li>R-squared: 0.80896354913783497</li>\n",
    "    <li>MSE: 1.2 x10^7</li>\n",
    "</ul>\n",
    "</p>\n",
    "    \n",
    "<p>Polynomial Fit: Using Highway-mpg as a Predictor Variable of Price.\n",
    "<ul>\n",
    "    <li>R-squared: 0.6741946663906514</li>\n",
    "    <li>MSE: 2.05 x 10^7</li>\n",
    "</ul>\n",
    "</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Simple Linear Regression Model (SLR) vs Multiple Linear Regression Model (MLR)</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Usually, the more variables you have, the better your model is at predicting, but this is not always true. Sometimes you may not have enough data, you may run into numerical problems, or many of the variables may not be useful and even act as noise. As a result, you should always check the MSE and R^2.</p>\n",
    "\n",
    "<p>In order to compare the results of the MLR vs SLR models, we look at a combination of both the R-squared and MSE to make the best conclusion about the fit of the model.\n",
    "<ul>\n",
    "    <li><b>MSE</b>: The MSE of SLR is  3.16x10^7  while MLR has an MSE of 1.2 x10^7.  The MSE of MLR is much smaller.</li>\n",
    "    <li><b>R-squared</b>: In this case, we can also see that there is a big difference between the R-squared of the SLR and the R-squared of the MLR. The R-squared for the SLR (~0.497) is very small compared to the R-squared for the MLR (~0.809).</li>\n",
    "</ul>\n",
    "</p>\n",
    "\n",
    "This R-squared in combination with the MSE show that MLR seems like the better model fit in this case compared to SLR.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Simple Linear Model (SLR) vs. Polynomial Fit</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ul>\n",
    "    <li><b>MSE</b>: We can see that Polynomial Fit brought down the MSE, since this MSE is smaller than the one from the SLR.</li> \n",
    "    <li><b>R-squared</b>: The R-squared for the Polynomial Fit is larger than the R-squared for the SLR, so the Polynomial Fit also brought up the R-squared quite a bit.</li>\n",
    "</ul>\n",
    "<p>Since the Polynomial Fit resulted in a lower MSE and a higher R-squared, we can conclude that this was a better fit model than the simple linear regression for predicting \"price\" with \"highway-mpg\" as a predictor variable.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Multiple Linear Regression (MLR) vs. Polynomial Fit</h3>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<ul>\n",
    "    <li><b>MSE</b>: The MSE for the MLR is smaller than the MSE for the Polynomial Fit.</li>\n",
    "    <li><b>R-squared</b>: The R-squared for the MLR is also much larger than for the Polynomial Fit.</li>\n",
    "</ul>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2>Conclusion</h2>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<p>Comparing these three models, we conclude that <b>the MLR model is the best model</b> to be able to predict price from our dataset. This result makes sense since we have 27 variables in total and we know that more than one of those variables are potential predictors of the final car price.</p>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Thank you for completing this lab!\n",
    "\n",
    "\n",
    "## Author\n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/joseph-s-50398b136/\" target=\"_blank\">Joseph Santarcangelo</a>\n",
    "\n",
    "\n",
    "### Other Contributors\n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/mahdi-noorian-58219234/\" target=\"_blank\">Mahdi Noorian PhD</a>\n",
    "\n",
    "Bahare Talayian\n",
    "\n",
    "Eric Xiao\n",
    "\n",
    "Steven Dong\n",
    "\n",
    "Parizad\n",
    "\n",
    "Hima Vasudevan\n",
    "\n",
    "<a href=\"https://www.linkedin.com/in/fiorellawever/\" target=\"_blank\">Fiorella Wenver</a>\n",
    "\n",
    "<a href=\" https://www.linkedin.com/in/yi-leng-yao-84451275/ \" target=\"_blank\" >Yi Yao</a>.\n",
    "\n",
    "<a href=\"https://www.coursera.org/instructor/~129186572\" target = \"_blank\" > Abhishek Gagneja</a>\n",
    "\n",
    "## Change Log\n",
    "\n",
    "\n",
    "|  Date (YYYY-MM-DD) |  Version | Changed By  |  Change Description |\n",
    "|---|---|---|---|\n",
    "| 2023-09-28 | 2.3 | Abhishek Gagneja | Updated instructions |\n",
    "| 2020-10-30  | 2.2  | Lakshmi  |Changed url of csv  |\n",
    "| 2020-09-09  | 2.1  | Lakshmi  | Fixes made in Polynomial Regression Equations  |\n",
    "| 2020-08-27  | 2.0  | Lavanya  |  Moved lab to course repo in GitLab  |\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "<hr>\n",
    "\n",
    "## <h3 align=\"center\"> © IBM Corporation 2023. All rights reserved. <h3/>\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "python",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8"
  },
  "kernelspec": {
   "name": "python3",
   "language": "python",
   "display_name": "Python 3 (ipykernel)"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
